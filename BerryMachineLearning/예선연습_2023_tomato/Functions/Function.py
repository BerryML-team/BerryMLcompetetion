def colored_text(text, color='default', bold=False):
        '''
        #### ÏòàÏãú ÏÇ¨Ïö©Î≤ï
        print(colored_text('Ï†ÄÏû• ÌïòÏßÄ ÏïäÏäµÎãàÎã§.', 'red'))
        print(colored_text('Ï†ÄÏû• Ìï©ÎãàÎã§.', 'green'))
        default,red,green,yellow,blue, magenta, cyan, white, rest
        '''
        colors = {
            'default': '\033[99m',
            'red': '\033[91m',
            'green': '\033[92m',
            'yellow': '\033[93m',
            'blue': '\033[94m',
            'magenta': '\033[95m', #Î≥¥ÎùºÏÉâ
            'cyan': '\033[96m',
            'white': '\033[97m',
            'bright_black': '\033[90m',  # Î∞ùÏùÄ Í≤ÄÏ†ïÏÉâ (ÌöåÏÉâ)
            'bright_red': '\033[91m',  # Î∞ùÏùÄ Îπ®Í∞ÑÏÉâ
            'bright_green': '\033[92m',  # Î∞ùÏùÄ Ï¥àÎ°ùÏÉâ
            'bright_yellow': '\033[93m',  # Î∞ùÏùÄ ÎÖ∏ÎûÄÏÉâ
            'bright_blue': '\033[94m',  # Î∞ùÏùÄ ÌååÎûÄÏÉâ
            'bright_magenta': '\033[95m',  # Î∞ùÏùÄ Î≥¥ÎùºÏÉâ
            'bright_cyan': '\033[96m',  # Î∞ùÏùÄ Ï≤≠Î°ùÏÉâ
            'bright_white': '\033[97m',  # Î∞ùÏùÄ Ìù∞ÏÉâ
            'reset': '\033[0m'
        }
        color_code = colors.get(color, colors['default'])
        bold_code = '\033[1m' if bold else ''
        reset_code = colors['reset']
        
        return f"{bold_code}{color_code}{text}{reset_code}"
def blue(str):return Service.colored_text(str,'blue')
def yellow(str):return Service.colored_text(str,'yellow')
def red(str):return Service.colored_text(str,'red')
def green(str):return Service.colored_text(str,'green')



class Service:
    
    def __init__(self) -> None:
        pass
    

####  Îç∞Ïù¥ÌÑ∞ Ï≤¥ÌÅ¨Î∞è Ï†ïÏ†ú Í¥ÄÎ†® Ìï®ÏàòÎì§ 
    def dataInfoProcessing(df, replace_Nan=False, PrintOutColnumber = 6,nanFillValue=0):
        ''' 
        üìå Fucntion Description :  Data frame Ïùò Ï†ïÏ†úÌï¥ÏïºÌï† Î∂ÄÎ∂ÑÏùÑ Ï≤¥ÌÅ¨Ìï¥Ï£ºÎäî Ìï®Ïàò 
        üìå Date : 2024.06.02 
        üìå Author : Forrest D Park 
        üìå update : 
            2024.08.07 by pdg : Ï†ïÏ†ú Ìï®Ïàò ÏàòÏ†ï 

        '''

        
        print(Service.colored_text(f"  1Ô∏è‚É£ Data row/colum numbers : {len(df.index)}/{len(df.columns)}",'red'))
        print(yellow(f"column Ïàò : {df.columns()}"))
        #print(subway.columns)
        #print(subway.info())
        null_message =f"Ï¥ù {df.isnull().sum().sum()}Í∞úÏùò null Ïù¥ ÏûàÏäµÎãàÎã§!" if df.isnull().sum().sum() else "Null ÏóÜÎäî clean data!"
        print(Service.colored_text(f"  2Ô∏è‚É£ null check Í≤∞Í≥º{null_message}",'red'))
        ### Null Ïù¥ ÏûàÎäî ÏπºÎüº Ï∂îÏ∂ú
        haveNullColumn =[]
        for idx, col in enumerate(df.columns):
            if df[f"{col}"].isnull().sum():
                print(f"   => {idx}Î≤àÏß∏.[{col}]Ïª¨Îüº : ",f"null {df[f'{col}'].isnull().sum()} Í∞ú,\t not null {df[f'{col}'].notnull().sum()} Í∞ú")
                ## Null data fill
                if replace_Nan : ## nan ÏùÑ 0 ÏúºÎ°ú ÎåÄÏ≤¥ 
                    df=df[col].fillna(value=nanFillValue, inplace=True)  
            
        
        print(Service.colored_text("  3Ô∏è‚É£ Column  Information (Ï§ëÎ≥µÏ≤¥ÌÅ¨)",'red'))
        print( "\tidx.columName |\t\t\t\t |Colum Info(dtype)|** ")
        print( "\t","--"*len("columIdx |\t\t\t\t **|Col(dtype)|** "))
        for idx, col in enumerate(df.dtypes.keys()):
            if idx< PrintOutColnumber:
                if len(f"\t{idx}.[{col}({df.dtypes[col]})]:")<20:
                    print(f"\t{idx}.[{col}({df.dtypes[col]})]:",\
                        f"{len(df[col].unique())}/{len(df[col])} [uniq/raw]", sep=" \t\t\t")
                else:
                        print(f"\t{idx}.[{col}({df.dtypes[col]})]:",\
                        f"{len(df[col].unique())}/{len(df[col])} [uniq/raw]", sep=" \t\t")

        else: 
            print(f"\t ...etc (Ï∂îÍ∞ÄÎ°ú {len(df.dtypes.keys())-PrintOutColnumber}Í∞úÏùò ÏπºÎüºÏù¥ ÏûàÏäµÎãàÎã§ )")
        return df
    